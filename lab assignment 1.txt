from collections import deque

def bfs_shortest_path(start, goal, graph):
    queue = deque([(start, [start])])  # Queue of tuples (current city, path taken)
    visited = set([start])  # Set of visited cities

    while queue:
        current_city, path = queue.popleft()

        # Check if we've reached the goal
        if current_city == goal:
            return path
        
        # Explore neighbors
        for neighbor in graph[current_city]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))

    return None  # If no path is found

# Graph representation
graph = {
    'Islamabad': ['Rawalpindi', 'Lahore', 'Peshawar'],
    'Rawalpindi': ['Islamabad', 'Peshawar', 'Quetta'],
    'Peshawar': ['Islamabad', 'Rawalpindi', 'Quetta'],
    'Lahore': ['Islamabad', 'Multan', 'Quetta'],
    'Multan': ['Lahore', 'Karachi', 'Quetta'],
    'Quetta': ['Rawalpindi', 'Peshawar', 'Multan', 'Karachi'],
    'Karachi': ['Multan', 'Quetta']
}

# Find the shortest path from Islamabad to Karachi
start_city = 'Islamabad'
goal_city = 'Karachi'
shortest_path = bfs_shortest_path(start_city, goal_city, graph)

print("Shortest path from Islamabad to Karachi:", shortest_path)
